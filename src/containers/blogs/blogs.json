{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/@sanghamitrahota",
        "title": "Stories by Sanghamitra Hota on Medium",
        "link": "https://medium.com/@sanghamitrahota?source=rss-67106fb03441------2",
        "author": "",
        "description": "Stories by Sanghamitra Hota on Medium",
        "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*-CCxBkLZOF2aHJngBcbh4g.jpeg"
    },
    "items": [
        {
            "title": "LoadBalancers\u200a\u2014\u200a3 (Consistent Hashing)",
            "pubDate": "2024-03-18 13:05:00",
            "link": "https://medium.com/@sanghamitrahota/loadbalancers-3-consistent-hashing-837bf8484970?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/837bf8484970",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<h3>LoadBalancers\u200a\u2014\u200a3 (Consistent Hashing)</h3>\n<p>I would try to explain consistent hashing which is widely used in large scaled distributed systems, not only in load balancing but also in horizontal sharding.</p>\n<p><strong>What is Hashing\u00a0?</strong></p>\n<p>The classic meaning of hashing is\u00a0, it uses a hash function to generate some random value which is again calculated (mod) with the available space and the key is mapped in the available space.</p>\n<p><strong>Hashing in a distributed World</strong></p>\n<p>In the real world, users tries to hit a service having multiple servers, we need a mechanism to map the requests to servers very intelligently keeping in mind of performance. It takes 2 things into consideration i.e <br>1) The no. of servers is fixed.<br>2) we are always aware of the no. of\u00a0servers</p>\n<p>Eg\u00a0: We have some requests and 3 servers, this is how classic hashing will\u00a0work.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WAHQjgUI28GnxaN2yC2pmg.png\"></figure><p>But suppose, one server goes down due to a severe flood in that location\u00a0:(. Lets say server 2. What happens to our requests and hash modulo function (R3, R5 can no longer rely on server 2). We would need to change out hash module function to hash(key) % 2 and re-distribute the hashes again. And that also doesn't guarantee if the server will be overloaded or not like in here server 1 has 4 requests but server 0 has only\u00a01.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N-vEfaWPEacsyO8GXLWJnw.png\"></figure><p>Similarly in case a new server is added\u00a0, we would need to again change our hash modulo function and re-distribute the hashes again which will literally invalidate the caching we use thinking our hashes are little predictable.</p>\n<p>The solution to avoid this is tadaaaaa\u00a0\u2026\u2026 consistent hashing.</p>\n<h3><strong>Consistent Hashing</strong></h3>\n<p>In this we want to similar function as we were doing in classic hashing but we want very little re-distribution of keys in case any new server is added or any server is removed. We dont want to depend on the no. of servers directly.</p>\n<p>In consistent hashing, we imagine of a <strong>virtual ring</strong> and distribute the servers in the hash ring. This will allow to scale up and down the servers and requests without much re-distribution. We are assuming our hash result lies in between <strong>0 to [2\u00b3\u00b2-1]</strong>. We are choosing a large no. to avoid collision and have as much space as possible. So this is not a mandatory value, its good to keep the no.\u00a0large</p>\n<p><strong>In this method, all the client requests and servers have a unique ids. We hash these ids and assign it in virtual ring. For each client request we go clockwise and assign the request to the nearest\u00a0server.</strong></p>\n<p>If we assume M as the no. of servers\u00a0, and if we are plotting the hashed value of server into the ring, we would require M no. of segments. Considering we choose a good hash function, each server is handling R/M load factor (R is the no of request).</p>\n<p>Eg: I am assuming a hash ring of size 15, with 3 servers and 5 incoming requests in it. And we are going clock wise and assigning the request to the next server like below\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3y_CK4W_u429zJFzOYJqOA.jpeg\"></figure><p><strong>Adding a server\u00a0:</strong> In case we add any server\u00a0, so now we will have 4 servers and 5 request. Only a small part of the requests needed re routing, others are still constant.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nw2gzQgvMdXT9ea_b0EG5g.jpeg\"></figure><p><strong>Removing a server\u00a0:</strong> In case any server goes down, so now we will have 2 servers and 5\u00a0request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IstyzeJRySMPZ-BiW3ALqg.jpeg\"></figure><p>In both of the cases only a few no. of requests needed to be re routed i.e R/M requests and the rest of the locations remains constant. This is a very small no. compared to a normal hashing right\u00a0:)</p>\n<p><strong>Cons</strong>\u00a0: <br>1) Although we are expecting R/M load on each server, it might happen a server gets overloaded like in the example above where server 1 has 4 requests where as server 2 has only\u00a01.</p>\n<p><em>To avoid this we can make use if </em><strong><em>virtual copies</em></strong><em>. In this we dont actually buy extra servers, that will be obviously very expensive. Instead of getting 1 id for the server, we create K ids of the one server and place them on the virtual ring. This helps us to achieve similar loads on the\u00a0server.</em></p>\n<p>2) This also doesn't work if servers have different capacities.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=837bf8484970\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<h3>LoadBalancers\u200a\u2014\u200a3 (Consistent Hashing)</h3>\n<p>I would try to explain consistent hashing which is widely used in large scaled distributed systems, not only in load balancing but also in horizontal sharding.</p>\n<p><strong>What is Hashing\u00a0?</strong></p>\n<p>The classic meaning of hashing is\u00a0, it uses a hash function to generate some random value which is again calculated (mod) with the available space and the key is mapped in the available space.</p>\n<p><strong>Hashing in a distributed World</strong></p>\n<p>In the real world, users tries to hit a service having multiple servers, we need a mechanism to map the requests to servers very intelligently keeping in mind of performance. It takes 2 things into consideration i.e <br>1) The no. of servers is fixed.<br>2) we are always aware of the no. of\u00a0servers</p>\n<p>Eg\u00a0: We have some requests and 3 servers, this is how classic hashing will\u00a0work.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WAHQjgUI28GnxaN2yC2pmg.png\"></figure><p>But suppose, one server goes down due to a severe flood in that location\u00a0:(. Lets say server 2. What happens to our requests and hash modulo function (R3, R5 can no longer rely on server 2). We would need to change out hash module function to hash(key) % 2 and re-distribute the hashes again. And that also doesn't guarantee if the server will be overloaded or not like in here server 1 has 4 requests but server 0 has only\u00a01.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N-vEfaWPEacsyO8GXLWJnw.png\"></figure><p>Similarly in case a new server is added\u00a0, we would need to again change our hash modulo function and re-distribute the hashes again which will literally invalidate the caching we use thinking our hashes are little predictable.</p>\n<p>The solution to avoid this is tadaaaaa\u00a0\u2026\u2026 consistent hashing.</p>\n<h3><strong>Consistent Hashing</strong></h3>\n<p>In this we want to similar function as we were doing in classic hashing but we want very little re-distribution of keys in case any new server is added or any server is removed. We dont want to depend on the no. of servers directly.</p>\n<p>In consistent hashing, we imagine of a <strong>virtual ring</strong> and distribute the servers in the hash ring. This will allow to scale up and down the servers and requests without much re-distribution. We are assuming our hash result lies in between <strong>0 to [2\u00b3\u00b2-1]</strong>. We are choosing a large no. to avoid collision and have as much space as possible. So this is not a mandatory value, its good to keep the no.\u00a0large</p>\n<p><strong>In this method, all the client requests and servers have a unique ids. We hash these ids and assign it in virtual ring. For each client request we go clockwise and assign the request to the nearest\u00a0server.</strong></p>\n<p>If we assume M as the no. of servers\u00a0, and if we are plotting the hashed value of server into the ring, we would require M no. of segments. Considering we choose a good hash function, each server is handling R/M load factor (R is the no of request).</p>\n<p>Eg: I am assuming a hash ring of size 15, with 3 servers and 5 incoming requests in it. And we are going clock wise and assigning the request to the next server like below\u00a0:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3y_CK4W_u429zJFzOYJqOA.jpeg\"></figure><p><strong>Adding a server\u00a0:</strong> In case we add any server\u00a0, so now we will have 4 servers and 5 request. Only a small part of the requests needed re routing, others are still constant.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nw2gzQgvMdXT9ea_b0EG5g.jpeg\"></figure><p><strong>Removing a server\u00a0:</strong> In case any server goes down, so now we will have 2 servers and 5\u00a0request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IstyzeJRySMPZ-BiW3ALqg.jpeg\"></figure><p>In both of the cases only a few no. of requests needed to be re routed i.e R/M requests and the rest of the locations remains constant. This is a very small no. compared to a normal hashing right\u00a0:)</p>\n<p><strong>Cons</strong>\u00a0: <br>1) Although we are expecting R/M load on each server, it might happen a server gets overloaded like in the example above where server 1 has 4 requests where as server 2 has only\u00a01.</p>\n<p><em>To avoid this we can make use if </em><strong><em>virtual copies</em></strong><em>. In this we dont actually buy extra servers, that will be obviously very expensive. Instead of getting 1 id for the server, we create K ids of the one server and place them on the virtual ring. This helps us to achieve similar loads on the\u00a0server.</em></p>\n<p>2) This also doesn't work if servers have different capacities.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=837bf8484970\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "load-balancer",
                "system-design-interview",
                "consistent-hashing",
                "system-design-concepts"
            ]
        },
        {
            "title": "Load Balancers\u200a\u2014\u200a2",
            "pubDate": "2024-03-13 11:39:33",
            "link": "https://medium.com/@sanghamitrahota/load-balancers-2-ce54d87a615c?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/ce54d87a615c",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<h3>Load Balancers\u200a\u2014\u200a2</h3>\n<h3><strong>Static Load Balancing Algorithms\u00a0:</strong></h3>\n<p>1.<strong><em> Round Robin\u00a0: </em></strong>It is a basic and easy algorithm which sends the request to the server in a sequential manner. If there are 3 servers A,B,C. 1st request goes to server A, 2nd to server B\u00a0\u2026 4th will again start from server A. The services are usually required to be stateless.</p>\n<p><strong>Cons\u00a0: </strong><br>This assumes all the server are equi-powered, and might cause a server to overload and crash while other servers are in idle\u00a0state</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EwdiTqztP1vtIul6NIQ0IA.png\"></figure><p><strong><em>2. Weighted Round Robin\u00a0:</em></strong> This is similar to round robin but every server has some weights attached to it which is directly proportional to the capacity of server. More the weightage, more no. of request the server can handle. It also allocate the request in a cyclic\u00a0manner.</p>\n<p>For eg\u00a0: If there are 3 servers A,B,C with weights 5,2,1 respectively. Now we have 8 requests. The first 5 request will go to server A, then 2 requests will go to server B and 1 request to server C. <br>In case there is some incoming requests after these, again it goes to server A until the quota of 5 request is completed, then the request goes to server B\u00a0.. so on and\u00a0forth.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tez6m9AflTbkpxeOIYR58Q.png\"></figure><p><strong><em>3. Sticky Round Robin\u00a0:</em></strong> This is an improvement of round robin. It combines the principles of Round-Robin and Sticky Sessions. If user A\u2019s first request has been served by server A then all the subsequent request is served by server A. This can be more efficient as unique session-related data does not need to be migrated from server to server. But it doesn't keep in mind the computational power of each\u00a0server.</p>\n<p>It is used in stateful server where we take advantage of the cached information, instead of performing the same costly operation every time the same request is made by the\u00a0client.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4Y5LrN9NlncdereKMiPEBA.png\"></figure><p>As I wanted to explain hashing properly, I would try to put that in another page\u00a0:) Bye\u00a0guys</p>\n<p>Next part\u00a0: <a href=\"https://medium.com/me/stats/post/837bf8484970\">https://medium.com/me/stats/post/837bf8484970</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ce54d87a615c\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<h3>Load Balancers\u200a\u2014\u200a2</h3>\n<h3><strong>Static Load Balancing Algorithms\u00a0:</strong></h3>\n<p>1.<strong><em> Round Robin\u00a0: </em></strong>It is a basic and easy algorithm which sends the request to the server in a sequential manner. If there are 3 servers A,B,C. 1st request goes to server A, 2nd to server B\u00a0\u2026 4th will again start from server A. The services are usually required to be stateless.</p>\n<p><strong>Cons\u00a0: </strong><br>This assumes all the server are equi-powered, and might cause a server to overload and crash while other servers are in idle\u00a0state</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EwdiTqztP1vtIul6NIQ0IA.png\"></figure><p><strong><em>2. Weighted Round Robin\u00a0:</em></strong> This is similar to round robin but every server has some weights attached to it which is directly proportional to the capacity of server. More the weightage, more no. of request the server can handle. It also allocate the request in a cyclic\u00a0manner.</p>\n<p>For eg\u00a0: If there are 3 servers A,B,C with weights 5,2,1 respectively. Now we have 8 requests. The first 5 request will go to server A, then 2 requests will go to server B and 1 request to server C. <br>In case there is some incoming requests after these, again it goes to server A until the quota of 5 request is completed, then the request goes to server B\u00a0.. so on and\u00a0forth.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tez6m9AflTbkpxeOIYR58Q.png\"></figure><p><strong><em>3. Sticky Round Robin\u00a0:</em></strong> This is an improvement of round robin. It combines the principles of Round-Robin and Sticky Sessions. If user A\u2019s first request has been served by server A then all the subsequent request is served by server A. This can be more efficient as unique session-related data does not need to be migrated from server to server. But it doesn't keep in mind the computational power of each\u00a0server.</p>\n<p>It is used in stateful server where we take advantage of the cached information, instead of performing the same costly operation every time the same request is made by the\u00a0client.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4Y5LrN9NlncdereKMiPEBA.png\"></figure><p>As I wanted to explain hashing properly, I would try to put that in another page\u00a0:) Bye\u00a0guys</p>\n<p>Next part\u00a0: <a href=\"https://medium.com/me/stats/post/837bf8484970\">https://medium.com/me/stats/post/837bf8484970</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ce54d87a615c\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "load-balancing",
                "system-design-interview"
            ]
        },
        {
            "title": "Load Balancers",
            "pubDate": "2024-03-12 16:30:09",
            "link": "https://medium.com/@sanghamitrahota/load-balancers-4b3e9b8e2acf?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/4b3e9b8e2acf",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<h3><strong>What is a Load Balancer\u00a0?</strong></h3>\n<p>Load Balancer comes into picture when we have multiple servers for serving the request. We need some mechanism to organize which request will go to which server. So, basically load balancer helps to distribute the incoming traffic or workload across the multiple servers and helps to give a faster response.</p>\n<h3><strong>Why we need a load balancer\u00a0?</strong></h3>\n<ol>\n<li>\n<strong><em>Increasing of traffic\u00a0:</em> </strong>When the no. of request increases\u00a0, the server is bound to get overloaded and eventually your service will get restarted, Trust me we dont want that\u00a0:(</li>\n<li>\n<strong><em>Single point of failure\u00a0: </em></strong>In case we have only one server and that goes down due to some software or hardware failure, our whole application goes down with it. We dont want this\u00a0also</li>\n</ol>\n<p>Keeping the scalability in picture we can think of two types of scalability\u00a0:</p>\n<p><strong><em>Vertical Scaling: </em></strong>This is stacking up more amount of hardware like increasing no. of cpus to increase the power of our machine, but till what point can we do this\u00a0???</p>\n<p><strong><em>Horizontal Scaling:</em></strong><em> </em>This is adding more no. of servers, this will help us to avoid spof (Single point of failure) but to distribute the load we would need a load balancer.</p>\n<blockquote>Basically load balancer provides better response time, fault tolerance, high availability, keeps an health check on the server in case its down and shifts the load to another server in short high availability</blockquote>\n<p>P.S if in an real life situation, we have to adapt to scaling and no loop hole is there in our code, we can try out with vertical scaling first and observe the no. of service for few days and eventually go for horizontal scaling.</p>\n<h3><strong>How the load balancer balances the load\u00a0??</strong></h3>\n<p>Now after getting some idea on load balancer, we know it basically sits between the client and server to distribute the incoming traffic, but if we go to a very basic level. Its just a software which is following few algorithm to do these stuffs. Coming to some heavy lifting\u00a0:P</p>\n<p><strong>Types of Load Balancing Algorithms\u00a0:</strong></p>\n<p><strong><em>Static Load Balancing\u00a0:</em></strong> As the name suggests, it care less about the backend servers if any server is alive or dead, and keeps the distribution of load pretty simple but sometimes it can lead to overloading in a single server. But it is very easy to implement and can be used in a regular use case where we have few requests coming in. Eg: Round robin, Weighted Round Robin, Consistent Hashing\u00a0etc.</p>\n<p><strong><em>Dynamic Load Balancing\u00a0:</em></strong> As the name suggests, it care keeps a check on the current state of backend servers for any incoming request. These are a little complex in nature but helps to distribute the requests fairly. Eg\u00a0: Dynamic Round Robin, Least Connection, Weighted least Connection etc.</p>\n<p>This is all for now. I would try to delve deep into the algorithms in my next post. Toodles\u00a0:D</p>\n<p>Next Part\u00a0: <a href=\"https://medium.com/@sanghamitrahota/load-balancers-2-ce54d87a615c\">https://medium.com/@sanghamitrahota/load-balancers-2-ce54d87a615c</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4b3e9b8e2acf\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<h3><strong>What is a Load Balancer\u00a0?</strong></h3>\n<p>Load Balancer comes into picture when we have multiple servers for serving the request. We need some mechanism to organize which request will go to which server. So, basically load balancer helps to distribute the incoming traffic or workload across the multiple servers and helps to give a faster response.</p>\n<h3><strong>Why we need a load balancer\u00a0?</strong></h3>\n<ol>\n<li>\n<strong><em>Increasing of traffic\u00a0:</em> </strong>When the no. of request increases\u00a0, the server is bound to get overloaded and eventually your service will get restarted, Trust me we dont want that\u00a0:(</li>\n<li>\n<strong><em>Single point of failure\u00a0: </em></strong>In case we have only one server and that goes down due to some software or hardware failure, our whole application goes down with it. We dont want this\u00a0also</li>\n</ol>\n<p>Keeping the scalability in picture we can think of two types of scalability\u00a0:</p>\n<p><strong><em>Vertical Scaling: </em></strong>This is stacking up more amount of hardware like increasing no. of cpus to increase the power of our machine, but till what point can we do this\u00a0???</p>\n<p><strong><em>Horizontal Scaling:</em></strong><em> </em>This is adding more no. of servers, this will help us to avoid spof (Single point of failure) but to distribute the load we would need a load balancer.</p>\n<blockquote>Basically load balancer provides better response time, fault tolerance, high availability, keeps an health check on the server in case its down and shifts the load to another server in short high availability</blockquote>\n<p>P.S if in an real life situation, we have to adapt to scaling and no loop hole is there in our code, we can try out with vertical scaling first and observe the no. of service for few days and eventually go for horizontal scaling.</p>\n<h3><strong>How the load balancer balances the load\u00a0??</strong></h3>\n<p>Now after getting some idea on load balancer, we know it basically sits between the client and server to distribute the incoming traffic, but if we go to a very basic level. Its just a software which is following few algorithm to do these stuffs. Coming to some heavy lifting\u00a0:P</p>\n<p><strong>Types of Load Balancing Algorithms\u00a0:</strong></p>\n<p><strong><em>Static Load Balancing\u00a0:</em></strong> As the name suggests, it care less about the backend servers if any server is alive or dead, and keeps the distribution of load pretty simple but sometimes it can lead to overloading in a single server. But it is very easy to implement and can be used in a regular use case where we have few requests coming in. Eg: Round robin, Weighted Round Robin, Consistent Hashing\u00a0etc.</p>\n<p><strong><em>Dynamic Load Balancing\u00a0:</em></strong> As the name suggests, it care keeps a check on the current state of backend servers for any incoming request. These are a little complex in nature but helps to distribute the requests fairly. Eg\u00a0: Dynamic Round Robin, Least Connection, Weighted least Connection etc.</p>\n<p>This is all for now. I would try to delve deep into the algorithms in my next post. Toodles\u00a0:D</p>\n<p>Next Part\u00a0: <a href=\"https://medium.com/@sanghamitrahota/load-balancers-2-ce54d87a615c\">https://medium.com/@sanghamitrahota/load-balancers-2-ce54d87a615c</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4b3e9b8e2acf\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "system-design-interview",
                "load-balancing"
            ]
        },
        {
            "title": "Interview experience of Microsoft",
            "pubDate": "2024-03-08 08:04:46",
            "link": "https://medium.com/@sanghamitrahota/interview-experience-of-microsoft-8fa8ed7675f2?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/8fa8ed7675f2",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<p>Hi all, sharing my sde-2 microsoft\u2019s experience with you all. I was reached out by a recruiter in linkedin platform. It was via a third party consultancy who were hiring for sde-2 of microsoft.</p>\n<p>Firstly I had a codelity round. It was an OA, which had only one question. We are supposed to write the fully working code, the question was a twisted form of DFS graph based question. I was able to come up with the working code and submitted the code in half an hour. There were few example testcases and hidden testcases which was not visible to us if it was passing ir not. So I just pressed submit after the example testcases were passing. I got a call from recruiter saying that I completed the round. And asked if I was ready for a hiring-drive on a Saturday. I obviously said\u00a0yes.</p>\n<p>They had scheduled two rounds\u200a\u2014\u200aR1 and R2 back to back and said R3 will be dependant on\u00a0this.</p>\n<p>Round 1 was with a sde-2. We introduced ourselves and started with the coding directly. He shared me a coding platform link which was similar to hacker rank or coderpad (of goldmansachs)\u00a0. He pasted this question exactly <a href=\"https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/\">https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/</a> I had not seen this question earlier, so started with bruteforce and improvised my solution slowly. I felt the interviewer was a little lost and didnt help me much when I was getting deviated from solution. It was an ok round for me. Then he asked me few questions on what happens when we click on google.com, what is the difference between sql and no-sql database and few conceptual question like\u00a0that.</p>\n<p>Round 2 was also with a sde-2. We introduced ourselves and started with the coding directly. He started with database discussion instead of me saying I am not confident with it. He kept on asking deep dive questions from no-sql to sql, then to eventual to strong consistencey, locks in db, normalization and many more. And when 20 mins was left. He asked me a question to \u201cimplement deque with basic datastructure\u201d <a href=\"https://www.geeksforgeeks.org/implementation-deque-using-circular-array/\">https://www.geeksforgeeks.org/implementation-deque-using-circular-array/</a> I was not able to fully solve this due to time constraint.</p>\n<p>The recruiter called me after this and said I got a no-hire and they wont be moving forward with the\u00a0rounds.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8fa8ed7675f2\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>Hi all, sharing my sde-2 microsoft\u2019s experience with you all. I was reached out by a recruiter in linkedin platform. It was via a third party consultancy who were hiring for sde-2 of microsoft.</p>\n<p>Firstly I had a codelity round. It was an OA, which had only one question. We are supposed to write the fully working code, the question was a twisted form of DFS graph based question. I was able to come up with the working code and submitted the code in half an hour. There were few example testcases and hidden testcases which was not visible to us if it was passing ir not. So I just pressed submit after the example testcases were passing. I got a call from recruiter saying that I completed the round. And asked if I was ready for a hiring-drive on a Saturday. I obviously said\u00a0yes.</p>\n<p>They had scheduled two rounds\u200a\u2014\u200aR1 and R2 back to back and said R3 will be dependant on\u00a0this.</p>\n<p>Round 1 was with a sde-2. We introduced ourselves and started with the coding directly. He shared me a coding platform link which was similar to hacker rank or coderpad (of goldmansachs)\u00a0. He pasted this question exactly <a href=\"https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/\">https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/</a> I had not seen this question earlier, so started with bruteforce and improvised my solution slowly. I felt the interviewer was a little lost and didnt help me much when I was getting deviated from solution. It was an ok round for me. Then he asked me few questions on what happens when we click on google.com, what is the difference between sql and no-sql database and few conceptual question like\u00a0that.</p>\n<p>Round 2 was also with a sde-2. We introduced ourselves and started with the coding directly. He started with database discussion instead of me saying I am not confident with it. He kept on asking deep dive questions from no-sql to sql, then to eventual to strong consistencey, locks in db, normalization and many more. And when 20 mins was left. He asked me a question to \u201cimplement deque with basic datastructure\u201d <a href=\"https://www.geeksforgeeks.org/implementation-deque-using-circular-array/\">https://www.geeksforgeeks.org/implementation-deque-using-circular-array/</a> I was not able to fully solve this due to time constraint.</p>\n<p>The recruiter called me after this and said I got a no-hire and they wont be moving forward with the\u00a0rounds.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8fa8ed7675f2\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "LLD of a tic tac toe game",
            "pubDate": "2024-03-07 09:50:27",
            "link": "https://medium.com/@sanghamitrahota/lld-of-a-tic-tac-toe-game-cee9aa3424fa?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/cee9aa3424fa",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<p>We all know what is tic-tac-toe game. We all have played it\u00a0:P. Before starting with the uml, lets first get into the requirement</p>\n<p><strong>Functional Requirements\u00a0:</strong></p>\n<ol>\n<li><em>It is a two player\u00a0game.</em></li>\n<li><em>The gaming board can be of any size or\u00a0cells</em></li>\n<li><em>The game stops if one player\u00a0wins</em></li>\n<li><em>The game can be draw if no one\u00a0wins</em></li>\n<li><em>We keep track of\u00a0winner</em></li>\n</ol>\n<p>Keeping a track of the nouns from the requirement eg: Board, we can know what are the classes we will require. Take some time and note down the classes before proceeding forward.</p>\n<p>This is the UML diagram\u00a0, I have come up\u00a0with</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NgDjvdTt4buIeygkk_k0eg.png\"></figure><p>Lets start by creating the basic classes first. I would be using java\u2019s lambok for annotating getter and setter\u00a0methods</p>\n<pre>//Cell.java<br>package TicTacToe;<br><br>import lombok.AllArgsConstructor;<br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>@AllArgsConstructor<br>public class Cell {<br>  private int row;<br>  private int column;<br>  private Symbol symbol;<br>}<br><br>//Symbol.java<br>package TicTacToe;<br><br>public enum Symbol {<br>  X,O,NULL<br>}<br><br>//Player.java<br>package TicTacToe;<br><br>import java.util.UUID;<br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>public class Player {<br>  private UUID uuid;<br>  private String name;<br>  private Symbol symbol;<br><br>  Player(String name, Symbol symbol) {<br>    this.uuid = UUID.randomUUID();<br>    this.name = name;<br>    this.symbol = symbol;<br>  }<br>}</pre>\n<p>After all basic classes, we have two main classes Board.java and game.java. These two will hold the main logic of the game. We would try to keep all initialisation in these two classes, so that the Main.java is not handling any logic related to any tic tac toe logic to follow the SOLID principles.</p>\n<pre>//Board.java<br><br>package TicTacToe;<br><br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>public class Board {<br>  private Cell[][] cells;<br>  private int size;<br><br>  // initialise the board with the size given<br>  Board (int size) {<br>    this.size = size;<br>    this.cells = new Cell[size][size];<br>    intiliazeCells();<br>  }<br><br>  private void intiliazeCells() {<br>    for (int i = 0; i &lt; this.size; i++) {<br>      for (int j = 0; j &lt; this.size; j++) {<br>        this.cells[i][j] = new Cell(i, j, Symbol.NULL);<br>      }<br>    }<br>  }<br>  public void printBoard() {<br>    for (int i = 0; i &lt; this.size; i++) {<br>      for (int j = 0; j &lt; this.size; j++) {<br>        if (cells[i][j].getSymbol() != Symbol.NULL) {<br>          System.out.print(cells[i][j].getSymbol() + \"   \");<br>        } else {<br>          System.out.print(\"    \");<br><br>        }<br>        System.out.print(\" | \");<br>      }<br>      System.out.println();<br>    }<br>  }<br><br>  public boolean makeMove(Player playerWhoWillPlay, int inputRow, int inputColumn) {<br>    // Handling the out of boundary condition<br>    if (inputRow &lt; 0 || inputRow &gt; this.size || inputColumn &lt; 0 || inputColumn &gt; this.size) {<br>      return  false;<br>    }<br><br>    // if the cell is already filled, cant be overriden<br>    if (this.cells[inputRow][inputColumn].getSymbol() != Symbol.NULL) {<br>      return  false;<br>    }<br>    this.cells[inputRow][inputColumn].setSymbol(playerWhoWillPlay.getSymbol());<br>    return true;<br>  }<br>}</pre>\n<pre>//Game.java<br><br>package TicTacToe;<br><br>import java.util.ArrayDeque;<br>import java.util.Deque;<br>import java.util.List;<br>import java.util.Scanner;<br><br>public class Game {<br>  private Deque&lt;Player&gt; playersQueue;<br>  private Board board;<br>  private String winner;<br>  private int freeCellsAvailable;<br><br>  public void setupGame(List&lt;Player&gt; playerList, int size) {<br>    this.playersQueue = new ArrayDeque&lt;&gt;();<br><br>    for (int i = 0; i &lt; playerList.size(); i++) {<br>      this.playersQueue.add(playerList.get(i));<br>    }<br><br>    this.board = new Board(size);<br>    this.freeCellsAvailable = size * size;<br>    this.winner = null;<br>  }<br><br>  public String startGame() {<br><br>    // After each move check the board , to see if there is a winner, if yes we stop the game<br>    while (winner == null) {<br>      // check if the game is draw, no more move is possible<br>      if (freeCellsAvailable == 0) return \"tie\";<br><br>      // take out the player whose turn is and also put the player in the list back to play again<br>      Player playerWhoWillPlay = playersQueue.removeFirst();<br><br>      playersQueue.addLast(playerWhoWillPlay);<br><br>      //Give the prompt to user to play<br>      System.out.print(\"Player:\" + playerWhoWillPlay.getName() + \" Enter row,column in the format row,column: \");<br><br>      Scanner inputScanner = new Scanner(System.in);<br>      String s = inputScanner.nextLine();<br>      String[] values = s.split(\",\");<br>      int inputRow = Integer.valueOf(values[0]);<br>      int inputColumn = Integer.valueOf(values[1]);<br><br>      // Check the symbol placement is done or not<br>      boolean isMoveSuccess = this.board.makeMove(playerWhoWillPlay, inputRow, inputColumn);<br>      // If move is not success then dont do anything, allow the next player to choose<br>      if (!isMoveSuccess) {<br>        System.out.println(\"Please give correct coordinates and you will get the next turn, penality for now\");<br>        continue;<br>      }<br>      // If move is success, deduce the freecells, which is helpful to determine the draw conditions<br>      freeCellsAvailable--;<br><br>      // print board after each move to give clarity to player<br>      board.printBoard();<br><br>      // After each move check the board , to see if there is a winner<br>      if (checkWinner(inputRow, inputColumn, playerWhoWillPlay.getSymbol())) {<br>        winner = playerWhoWillPlay.getName();<br>        System.out.println(winner);<br>        return \"Player : \" + winner + \" has won the game. Congratulations\";<br>      }<br>    }<br>    return \"Game over!!\";<br>  }<br><br>  private boolean checkWinner(int row, int column, Symbol symbol) {<br>    boolean rowMatch = true;<br>    boolean columnMatch = true;<br>    boolean diagonalMatch = true;<br>    boolean antiDiagonalMatch = true;<br><br>    //need to check in rows<br>    for(int i=0;i&lt; board.getSize();i++) {<br>      if(board.getCells()[row][i].getSymbol() == Symbol.NULL || board.getCells()[row][i].getSymbol() != symbol) {<br>        rowMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check in column<br>    for(int i = 0; i &lt; board.getSize(); i++) {<br>      if(board.getCells()[i][column].getSymbol() == Symbol.NULL || board.getCells()[i][column].getSymbol() != symbol) {<br>        columnMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check diagonals<br>    for(int i = 0, j = 0; i &lt; board.getSize(); i++,j++) {<br>      if (board.getCells()[i][j].getSymbol() == Symbol.NULL || board.getCells()[i][j].getSymbol() != symbol) {<br>        diagonalMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check anti-diagonals<br>    for(int i = 0, j = board.getSize() - 1; i &lt; board.getSize(); i++,j--) {<br>      if (board.getCells()[i][j].getSymbol() == Symbol.NULL|| board.getCells()[i][j].getSymbol() != symbol) {<br>        antiDiagonalMatch = false;<br>        break;<br>      }<br>    }<br>    return rowMatch || columnMatch || diagonalMatch || antiDiagonalMatch;<br>  }<br><br>}</pre>\n<p>Now lets write the Main function which calls the Game and starts it. As we have most implementation in other classes. This class has very restricted implementation just for creating the\u00a0objects</p>\n<pre>// Main.java<br>package TicTacToe;<br><br>import java.util.ArrayList;<br>import java.util.List;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    Game game = new Game();<br>    Player player1 = new Player(\"Rahul\", Symbol.O);<br>    Player player2 = new Player(\"Ravi\", Symbol.X);<br><br>    List&lt;Player&gt; playerList  = new ArrayList&lt;&gt;();<br>    playerList.add(player1);<br>    playerList.add(player2);<br><br>    game.setupGame(playerList, 3);<br>    String gameStatus = game.startGame();<br>    System.out.println(gameStatus);<br>  }<br>}</pre>\n<p>Hopefully you liked it. Please give a comment in case of any doubts. Thanks guys\u00a0!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cee9aa3424fa\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>We all know what is tic-tac-toe game. We all have played it\u00a0:P. Before starting with the uml, lets first get into the requirement</p>\n<p><strong>Functional Requirements\u00a0:</strong></p>\n<ol>\n<li><em>It is a two player\u00a0game.</em></li>\n<li><em>The gaming board can be of any size or\u00a0cells</em></li>\n<li><em>The game stops if one player\u00a0wins</em></li>\n<li><em>The game can be draw if no one\u00a0wins</em></li>\n<li><em>We keep track of\u00a0winner</em></li>\n</ol>\n<p>Keeping a track of the nouns from the requirement eg: Board, we can know what are the classes we will require. Take some time and note down the classes before proceeding forward.</p>\n<p>This is the UML diagram\u00a0, I have come up\u00a0with</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NgDjvdTt4buIeygkk_k0eg.png\"></figure><p>Lets start by creating the basic classes first. I would be using java\u2019s lambok for annotating getter and setter\u00a0methods</p>\n<pre>//Cell.java<br>package TicTacToe;<br><br>import lombok.AllArgsConstructor;<br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>@AllArgsConstructor<br>public class Cell {<br>  private int row;<br>  private int column;<br>  private Symbol symbol;<br>}<br><br>//Symbol.java<br>package TicTacToe;<br><br>public enum Symbol {<br>  X,O,NULL<br>}<br><br>//Player.java<br>package TicTacToe;<br><br>import java.util.UUID;<br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>public class Player {<br>  private UUID uuid;<br>  private String name;<br>  private Symbol symbol;<br><br>  Player(String name, Symbol symbol) {<br>    this.uuid = UUID.randomUUID();<br>    this.name = name;<br>    this.symbol = symbol;<br>  }<br>}</pre>\n<p>After all basic classes, we have two main classes Board.java and game.java. These two will hold the main logic of the game. We would try to keep all initialisation in these two classes, so that the Main.java is not handling any logic related to any tic tac toe logic to follow the SOLID principles.</p>\n<pre>//Board.java<br><br>package TicTacToe;<br><br>import lombok.Getter;<br>import lombok.Setter;<br><br>@Getter<br>@Setter<br>public class Board {<br>  private Cell[][] cells;<br>  private int size;<br><br>  // initialise the board with the size given<br>  Board (int size) {<br>    this.size = size;<br>    this.cells = new Cell[size][size];<br>    intiliazeCells();<br>  }<br><br>  private void intiliazeCells() {<br>    for (int i = 0; i &lt; this.size; i++) {<br>      for (int j = 0; j &lt; this.size; j++) {<br>        this.cells[i][j] = new Cell(i, j, Symbol.NULL);<br>      }<br>    }<br>  }<br>  public void printBoard() {<br>    for (int i = 0; i &lt; this.size; i++) {<br>      for (int j = 0; j &lt; this.size; j++) {<br>        if (cells[i][j].getSymbol() != Symbol.NULL) {<br>          System.out.print(cells[i][j].getSymbol() + \"   \");<br>        } else {<br>          System.out.print(\"    \");<br><br>        }<br>        System.out.print(\" | \");<br>      }<br>      System.out.println();<br>    }<br>  }<br><br>  public boolean makeMove(Player playerWhoWillPlay, int inputRow, int inputColumn) {<br>    // Handling the out of boundary condition<br>    if (inputRow &lt; 0 || inputRow &gt; this.size || inputColumn &lt; 0 || inputColumn &gt; this.size) {<br>      return  false;<br>    }<br><br>    // if the cell is already filled, cant be overriden<br>    if (this.cells[inputRow][inputColumn].getSymbol() != Symbol.NULL) {<br>      return  false;<br>    }<br>    this.cells[inputRow][inputColumn].setSymbol(playerWhoWillPlay.getSymbol());<br>    return true;<br>  }<br>}</pre>\n<pre>//Game.java<br><br>package TicTacToe;<br><br>import java.util.ArrayDeque;<br>import java.util.Deque;<br>import java.util.List;<br>import java.util.Scanner;<br><br>public class Game {<br>  private Deque&lt;Player&gt; playersQueue;<br>  private Board board;<br>  private String winner;<br>  private int freeCellsAvailable;<br><br>  public void setupGame(List&lt;Player&gt; playerList, int size) {<br>    this.playersQueue = new ArrayDeque&lt;&gt;();<br><br>    for (int i = 0; i &lt; playerList.size(); i++) {<br>      this.playersQueue.add(playerList.get(i));<br>    }<br><br>    this.board = new Board(size);<br>    this.freeCellsAvailable = size * size;<br>    this.winner = null;<br>  }<br><br>  public String startGame() {<br><br>    // After each move check the board , to see if there is a winner, if yes we stop the game<br>    while (winner == null) {<br>      // check if the game is draw, no more move is possible<br>      if (freeCellsAvailable == 0) return \"tie\";<br><br>      // take out the player whose turn is and also put the player in the list back to play again<br>      Player playerWhoWillPlay = playersQueue.removeFirst();<br><br>      playersQueue.addLast(playerWhoWillPlay);<br><br>      //Give the prompt to user to play<br>      System.out.print(\"Player:\" + playerWhoWillPlay.getName() + \" Enter row,column in the format row,column: \");<br><br>      Scanner inputScanner = new Scanner(System.in);<br>      String s = inputScanner.nextLine();<br>      String[] values = s.split(\",\");<br>      int inputRow = Integer.valueOf(values[0]);<br>      int inputColumn = Integer.valueOf(values[1]);<br><br>      // Check the symbol placement is done or not<br>      boolean isMoveSuccess = this.board.makeMove(playerWhoWillPlay, inputRow, inputColumn);<br>      // If move is not success then dont do anything, allow the next player to choose<br>      if (!isMoveSuccess) {<br>        System.out.println(\"Please give correct coordinates and you will get the next turn, penality for now\");<br>        continue;<br>      }<br>      // If move is success, deduce the freecells, which is helpful to determine the draw conditions<br>      freeCellsAvailable--;<br><br>      // print board after each move to give clarity to player<br>      board.printBoard();<br><br>      // After each move check the board , to see if there is a winner<br>      if (checkWinner(inputRow, inputColumn, playerWhoWillPlay.getSymbol())) {<br>        winner = playerWhoWillPlay.getName();<br>        System.out.println(winner);<br>        return \"Player : \" + winner + \" has won the game. Congratulations\";<br>      }<br>    }<br>    return \"Game over!!\";<br>  }<br><br>  private boolean checkWinner(int row, int column, Symbol symbol) {<br>    boolean rowMatch = true;<br>    boolean columnMatch = true;<br>    boolean diagonalMatch = true;<br>    boolean antiDiagonalMatch = true;<br><br>    //need to check in rows<br>    for(int i=0;i&lt; board.getSize();i++) {<br>      if(board.getCells()[row][i].getSymbol() == Symbol.NULL || board.getCells()[row][i].getSymbol() != symbol) {<br>        rowMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check in column<br>    for(int i = 0; i &lt; board.getSize(); i++) {<br>      if(board.getCells()[i][column].getSymbol() == Symbol.NULL || board.getCells()[i][column].getSymbol() != symbol) {<br>        columnMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check diagonals<br>    for(int i = 0, j = 0; i &lt; board.getSize(); i++,j++) {<br>      if (board.getCells()[i][j].getSymbol() == Symbol.NULL || board.getCells()[i][j].getSymbol() != symbol) {<br>        diagonalMatch = false;<br>        break;<br>      }<br>    }<br><br>    //need to check anti-diagonals<br>    for(int i = 0, j = board.getSize() - 1; i &lt; board.getSize(); i++,j--) {<br>      if (board.getCells()[i][j].getSymbol() == Symbol.NULL|| board.getCells()[i][j].getSymbol() != symbol) {<br>        antiDiagonalMatch = false;<br>        break;<br>      }<br>    }<br>    return rowMatch || columnMatch || diagonalMatch || antiDiagonalMatch;<br>  }<br><br>}</pre>\n<p>Now lets write the Main function which calls the Game and starts it. As we have most implementation in other classes. This class has very restricted implementation just for creating the\u00a0objects</p>\n<pre>// Main.java<br>package TicTacToe;<br><br>import java.util.ArrayList;<br>import java.util.List;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    Game game = new Game();<br>    Player player1 = new Player(\"Rahul\", Symbol.O);<br>    Player player2 = new Player(\"Ravi\", Symbol.X);<br><br>    List&lt;Player&gt; playerList  = new ArrayList&lt;&gt;();<br>    playerList.add(player1);<br>    playerList.add(player2);<br><br>    game.setupGame(playerList, 3);<br>    String gameStatus = game.startGame();<br>    System.out.println(gameStatus);<br>  }<br>}</pre>\n<p>Hopefully you liked it. Please give a comment in case of any doubts. Thanks guys\u00a0!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cee9aa3424fa\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "lld",
                "system-design-interview"
            ]
        },
        {
            "title": "Multithreading : How to print odd and even numbers in an increasing order using 2 threads",
            "pubDate": "2024-03-05 18:55:24",
            "link": "https://medium.com/@sanghamitrahota/how-to-print-odd-and-even-numbers-in-an-increasing-order-using-2-threads-9d2184cf5c23?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/9d2184cf5c23",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<p>This is a very common questions asked to mid level engineers in interview. Before jumping into the solution, we should be aware of multithreading, its life-cycle, <a href=\"https://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/\">producer-consumer </a>concept. If not please get these concepts clarified first.</p>\n<p>While implementing this problem, I tried to apply similar concept of <a href=\"https://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/\">producer-consumer</a>.</p>\n<p>First lets create a file Main.java. We will have two threads naming it as evenThread and oddThread. I am using the lambda expressions to create\u00a0thread.</p>\n<pre>Thread evenThread = new Thread(()-&gt;{<br>  try {<br>    // some function call to be made<br>  } catch (Exception e) {<br>    throw new RuntimeException(e);<br>  }<br>  }<br>);<br>Thread oddThread = new Thread(()-&gt;{<br>    try {<br>      // some function call to be made<br>    } catch (Exception e) {<br>      throw new RuntimeException(e);<br>    }<br>  }<br>);<br>evenThread.start();<br>oddThread.start();</pre>\n<p>After creating the thread, lets create another class printNumber.java and let it do all the heavy\u00a0lifting.</p>\n<p>We can do some modification in the function like using synchronized in block of code instead of making the function synchronized. I have added comments in each step to give clarity of the\u00a0logic</p>\n<pre>package MultiThreading;<br><br>public class PrintNumber {<br><br>  // define the maxNoToBePrinted i.e the till what no. we want to print<br>  int maxNoToBePrinted;<br>  // counter holds the main no. that is to be printed<br>  int counter = 0;<br>  public PrintNumber(int maxNoToBePrinted) {<br>    this.maxNoToBePrinted = maxNoToBePrinted;<br>  }<br><br>  // Using  synchronized keyword helps to acquire lock on an object<br>  public synchronized void printEven() throws Exception {<br>    // First level check is counter should be less than or equal to maxNoToBePrinted,<br>    // as we want to print up till that no. only<br>    while (counter &lt; maxNoToBePrinted ) {<br>      // if the counter is odd, we ask the evenThread to wait,<br>      // as this thread is responsible to print only the even numbers<br>      while (counter % 2 == 1) {<br>        wait();<br>      }<br>      // if the counter is even, we print the number here<br>      System.out.println(counter);<br>      counter++;<br><br>      // notifies the oddThread thread that it can start processing on counter<br>      notify();<br>    }<br>  }<br><br>  public synchronized void printOdd() throws Exception {<br>    while (counter &lt; maxNoToBePrinted) {<br>      // if the counter is even, we ask the oddThread to wait,<br>      // as this thread is responsible to print only the odd numbers<br>      while (counter % 2 == 0) {<br>        wait();<br>      }<br>      // if the counter is odd, we print the number here<br>      System.out.println(counter);<br>      counter++;<br>      // notifies the evenThread that it can start processing on counter variable<br>      notify();<br>    }<br>  }<br>}</pre>\n<p>** If we want to see some clear difference in thread execution, we can add Thread.sleep(1000) at end of each\u00a0notify()</p>\n<p>After this, we modify the Main.java\u00a0, by creating an object of PrintNumber and calling the printOdd and printEven methods from respective threads</p>\n<pre>package MultiThreading;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    // Create an object of PrintNumber, as PrintNumber uses synchronized methods.<br>    // It is allowed for one thread to acquire lock on PrintNumber's object<br>    // no other thread can execute any of the object\u2019s synchronized methods until the lock is released.<br>    PrintNumber printNumber = new PrintNumber(5);<br><br>    Thread evenThread = new Thread(()-&gt;{<br>      try {<br>        // evenThread calls printEven method<br>        printNumber.printEven();<br>      } catch (Exception e) {<br>        throw new RuntimeException(e);<br>      }<br>      }<br>    );<br>    Thread oddThread = new Thread(()-&gt;{<br>        try {<br>          // oddThread calls printOdd method<br>          printNumber.printOdd();<br>        } catch (Exception e) {<br>          throw new RuntimeException(e);<br>        }<br>      }<br>    );<br>    evenThread.start();<br>    oddThread.start();<br>  }<br>}</pre>\n<p>This was a basic implementation of producer\u200a\u2014\u200aconsumer problem, we can use this classic approach if asked to do operations on single stack or queue using multiple\u00a0threads.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9d2184cf5c23\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>This is a very common questions asked to mid level engineers in interview. Before jumping into the solution, we should be aware of multithreading, its life-cycle, <a href=\"https://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/\">producer-consumer </a>concept. If not please get these concepts clarified first.</p>\n<p>While implementing this problem, I tried to apply similar concept of <a href=\"https://www.geeksforgeeks.org/producer-consumer-solution-using-threads-java/\">producer-consumer</a>.</p>\n<p>First lets create a file Main.java. We will have two threads naming it as evenThread and oddThread. I am using the lambda expressions to create\u00a0thread.</p>\n<pre>Thread evenThread = new Thread(()-&gt;{<br>  try {<br>    // some function call to be made<br>  } catch (Exception e) {<br>    throw new RuntimeException(e);<br>  }<br>  }<br>);<br>Thread oddThread = new Thread(()-&gt;{<br>    try {<br>      // some function call to be made<br>    } catch (Exception e) {<br>      throw new RuntimeException(e);<br>    }<br>  }<br>);<br>evenThread.start();<br>oddThread.start();</pre>\n<p>After creating the thread, lets create another class printNumber.java and let it do all the heavy\u00a0lifting.</p>\n<p>We can do some modification in the function like using synchronized in block of code instead of making the function synchronized. I have added comments in each step to give clarity of the\u00a0logic</p>\n<pre>package MultiThreading;<br><br>public class PrintNumber {<br><br>  // define the maxNoToBePrinted i.e the till what no. we want to print<br>  int maxNoToBePrinted;<br>  // counter holds the main no. that is to be printed<br>  int counter = 0;<br>  public PrintNumber(int maxNoToBePrinted) {<br>    this.maxNoToBePrinted = maxNoToBePrinted;<br>  }<br><br>  // Using  synchronized keyword helps to acquire lock on an object<br>  public synchronized void printEven() throws Exception {<br>    // First level check is counter should be less than or equal to maxNoToBePrinted,<br>    // as we want to print up till that no. only<br>    while (counter &lt; maxNoToBePrinted ) {<br>      // if the counter is odd, we ask the evenThread to wait,<br>      // as this thread is responsible to print only the even numbers<br>      while (counter % 2 == 1) {<br>        wait();<br>      }<br>      // if the counter is even, we print the number here<br>      System.out.println(counter);<br>      counter++;<br><br>      // notifies the oddThread thread that it can start processing on counter<br>      notify();<br>    }<br>  }<br><br>  public synchronized void printOdd() throws Exception {<br>    while (counter &lt; maxNoToBePrinted) {<br>      // if the counter is even, we ask the oddThread to wait,<br>      // as this thread is responsible to print only the odd numbers<br>      while (counter % 2 == 0) {<br>        wait();<br>      }<br>      // if the counter is odd, we print the number here<br>      System.out.println(counter);<br>      counter++;<br>      // notifies the evenThread that it can start processing on counter variable<br>      notify();<br>    }<br>  }<br>}</pre>\n<p>** If we want to see some clear difference in thread execution, we can add Thread.sleep(1000) at end of each\u00a0notify()</p>\n<p>After this, we modify the Main.java\u00a0, by creating an object of PrintNumber and calling the printOdd and printEven methods from respective threads</p>\n<pre>package MultiThreading;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    // Create an object of PrintNumber, as PrintNumber uses synchronized methods.<br>    // It is allowed for one thread to acquire lock on PrintNumber's object<br>    // no other thread can execute any of the object\u2019s synchronized methods until the lock is released.<br>    PrintNumber printNumber = new PrintNumber(5);<br><br>    Thread evenThread = new Thread(()-&gt;{<br>      try {<br>        // evenThread calls printEven method<br>        printNumber.printEven();<br>      } catch (Exception e) {<br>        throw new RuntimeException(e);<br>      }<br>      }<br>    );<br>    Thread oddThread = new Thread(()-&gt;{<br>        try {<br>          // oddThread calls printOdd method<br>          printNumber.printOdd();<br>        } catch (Exception e) {<br>          throw new RuntimeException(e);<br>        }<br>      }<br>    );<br>    evenThread.start();<br>    oddThread.start();<br>  }<br>}</pre>\n<p>This was a basic implementation of producer\u200a\u2014\u200aconsumer problem, we can use this classic approach if asked to do operations on single stack or queue using multiple\u00a0threads.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9d2184cf5c23\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Interview Experience of Walmart",
            "pubDate": "2024-03-04 12:05:02",
            "link": "https://medium.com/@sanghamitrahota/interview-experience-of-walmart-30189ae69764?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/30189ae69764",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<p>I saw a linkedin post for a hiring drive with the email id and contact details given in the post. I took a chance and wrote a good write up (using Chatgpt\u00a0:P ) and sent my resume. After a week, I got a call from recruiter to schedule my interview on friday, every round being the elimination round.</p>\n<h4><strong>First Round</strong></h4>\n<p>It was a DSA based round. Expectation from this round were to solve two dsa problems. It was expected to write a pseudo code and dry run it using few examples. Taking care of edge cases was important.</p>\n<blockquote>First Question was a variation to <a href=\"https://leetcode.com/problems/climbing-stairs/description/\">Climbing Stairs</a>\u00a0. The question goes like\u00a0:</blockquote>\n<blockquote>A child can eat chocolate bar by taking certain no. of bites. Either he can eat 1 unit of chocolate with 1 bite or 2 units of chocolate with 1 bite or 3 units of chocolate with 1 bite. Please find how many minimum bites, he can take to finish the chocolate bar\u00a0?</blockquote>\n<p>I first gave the recursive approach\u00a0, and then to tabulation\u00a0, then to memoization. With each step I was giving the time and space complexity</p>\n<blockquote>The second question was a direct variation of <a href=\"https://leetcode.com/problems/trapping-rain-water/\">rainTrapping</a> problem. Instead of rain, it was\u00a0snow.</blockquote>\n<p>I was able to explain the solution and wrote the full code and dry run with examples\u00a0once.</p>\n<p>The verdict of this round was\u00a0Hire</p>\n<h4><strong>Second Round</strong></h4>\n<p>The second round was a Java LLD round. It started with giving introduction about me. The interviewer asked me few questions on my resume and introduced himself as well. Then he started asking few java conceptual questions\u00a0. I remember few of them, listing them down here\u00a0:</p>\n<blockquote>It was on multithreading\u00a0, it started with difference between thread and process\u00a0, and moved ahead to print the odd and even no.s using 2 thread in an increasing order.</blockquote>\n<p>The interviewer basically wanted to test the knowledge of synchronised, monitor lock, notify and wait life-cycle.</p>\n<blockquote>The next question was on hashing. What is the internal working of hashMap, write the code for it and few questions about thread safe hashmap i,e concurrentHashMap.</blockquote>\n<p>The next question was on difference between abstract and interface, difference between hashMap and HashSet and few common java questions</p>\n<p>The interviewer was very supportive throughout and was helping me where ever I was stopping.</p>\n<p>Unfortunately, I didn't qualify this round, as I was not prepared for a language specific round. But overall, it was a great learning experience for\u00a0me.</p>\n<p>The recruiter reached out to me again, I already had an offer by that time, as they said they cant match the offer. I decided not to move forward with the\u00a0process.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=30189ae69764\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>I saw a linkedin post for a hiring drive with the email id and contact details given in the post. I took a chance and wrote a good write up (using Chatgpt\u00a0:P ) and sent my resume. After a week, I got a call from recruiter to schedule my interview on friday, every round being the elimination round.</p>\n<h4><strong>First Round</strong></h4>\n<p>It was a DSA based round. Expectation from this round were to solve two dsa problems. It was expected to write a pseudo code and dry run it using few examples. Taking care of edge cases was important.</p>\n<blockquote>First Question was a variation to <a href=\"https://leetcode.com/problems/climbing-stairs/description/\">Climbing Stairs</a>\u00a0. The question goes like\u00a0:</blockquote>\n<blockquote>A child can eat chocolate bar by taking certain no. of bites. Either he can eat 1 unit of chocolate with 1 bite or 2 units of chocolate with 1 bite or 3 units of chocolate with 1 bite. Please find how many minimum bites, he can take to finish the chocolate bar\u00a0?</blockquote>\n<p>I first gave the recursive approach\u00a0, and then to tabulation\u00a0, then to memoization. With each step I was giving the time and space complexity</p>\n<blockquote>The second question was a direct variation of <a href=\"https://leetcode.com/problems/trapping-rain-water/\">rainTrapping</a> problem. Instead of rain, it was\u00a0snow.</blockquote>\n<p>I was able to explain the solution and wrote the full code and dry run with examples\u00a0once.</p>\n<p>The verdict of this round was\u00a0Hire</p>\n<h4><strong>Second Round</strong></h4>\n<p>The second round was a Java LLD round. It started with giving introduction about me. The interviewer asked me few questions on my resume and introduced himself as well. Then he started asking few java conceptual questions\u00a0. I remember few of them, listing them down here\u00a0:</p>\n<blockquote>It was on multithreading\u00a0, it started with difference between thread and process\u00a0, and moved ahead to print the odd and even no.s using 2 thread in an increasing order.</blockquote>\n<p>The interviewer basically wanted to test the knowledge of synchronised, monitor lock, notify and wait life-cycle.</p>\n<blockquote>The next question was on hashing. What is the internal working of hashMap, write the code for it and few questions about thread safe hashmap i,e concurrentHashMap.</blockquote>\n<p>The next question was on difference between abstract and interface, difference between hashMap and HashSet and few common java questions</p>\n<p>The interviewer was very supportive throughout and was helping me where ever I was stopping.</p>\n<p>Unfortunately, I didn't qualify this round, as I was not prepared for a language specific round. But overall, it was a great learning experience for\u00a0me.</p>\n<p>The recruiter reached out to me again, I already had an offer by that time, as they said they cant match the offer. I decided not to move forward with the\u00a0process.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=30189ae69764\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "interview-preparation",
                "interview-questions"
            ]
        },
        {
            "title": "Chain Of Responsibility",
            "pubDate": "2024-03-04 11:19:48",
            "link": "https://medium.com/@sanghamitrahota/chain-of-responsibility-5b6dc12300c4?source=rss-67106fb03441------2",
            "guid": "https://medium.com/p/5b6dc12300c4",
            "author": "Sanghamitra Hota",
            "thumbnail": "",
            "description": "\n<p>It is a behavioural design pattern. It helps the object in sending the request to next set of objects without having much awareness on who is going to handle it. In other terms, if one object generates an event that has to be handled by another object (which is a part of a chain of objects performing similar tasks), then a worker object would pass the event along the chain that consists of commands and objects, leading to the task being performed finally by another object that can execute\u00a0it.</p>\n<p>One of the real life example is an atm dispenser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/771/1*j1B0Y0N49uFiaYnrWp5INA.png\"></figure><h3>Implementation Details &amp; Pseudocode</h3>\n<p>First, we\u2019ll implement the pseudocode of the Main Handler class. We are calling it as Dispenser.java. It will be an abstract class, we will have a dispenser object and a method process which is responsible for calling the nextDispenser.</p>\n<pre>package AtmDispenser;<br><br>public abstract class Dispenser {<br><br>  private Dispenser nextdispenser;<br><br>  public Dispenser (Dispenser dispenser) {<br>    this.nextdispenser = dispenser;<br>  }<br>  public void process(int amount) {<br>    this.nextdispenser.process(amount);<br>  }<br>}</pre>\n<p>Next we will create the concrete handlers i.e ThousandDispenser FiveHundredDispenser etc.</p>\n<p>Lets take an example of ThousandDispenser, it will extend Dispenser class, and override the process method with the implementation of accepting the multiplier of 1000 and sending the remaining amount to the next dispenser</p>\n<pre>package AtmDispenser;<br><br>// ThousandDispenser.java<br>public class ThousandDispenser extends Dispenser{<br>  public ThousandDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 1000) return;<br>    int notes = 0;<br>    notes = amount / 1000;<br>    if (notes != 0) {<br>      System.out.println(\"1000's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (1000 * notes);<br>    super.process(remainingAmount);<br>  }<br>}<br><br>// FiveHundredDispenser.java<br>package AtmDispenser;<br><br>public class FiveHundredDispenser extends  Dispenser{<br>  public FiveHundredDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 500) return;<br>    int notes = 0;<br>    notes = amount / 500;<br>    if (notes != 0) {<br>      System.out.println(\"500's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (500 * notes);<br>    super.process(remainingAmount);<br>  }<br>}<br><br>// HundredDispenser.java<br>package AtmDispenser;<br><br>public class HundredDispenser extends  Dispenser{<br>  public HundredDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 100) return;<br>    int notes = 0;<br>    notes = amount / 100;<br>    if (notes != 0) {<br>      System.out.println(\"100's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (100 * notes);<br>    super.process(remainingAmount);<br>  }<br>}</pre>\n<p>Lets create the main.java and execute the dispenser. In this, we are creating dispenser with chaining of dispenser, passing on the nextDispenser i.e For OneThoundDispenser, the nextDispenser will be FiveHundredDispenser; for FiveHundredDispenser, the nextDispenser will be HundredDispenser.</p>\n<pre>package AtmDispenser;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    Dispenser dispenser = new ThousandDispenser(new FiveHundredDispenser(new HundredDispenser(null)));<br>    dispenser.process(2500);<br><br>    // Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61369:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/hsanghamitra/Documents/Personal Learning/Design Pattern/serviceNow/out/production/serviceNow:/Users/hsanghamitra/.m2/repository/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar AtmDispenser.Main<br>    // 1000's note is: 2<br>    // 500's note is: 1<br>  }<br><br>}</pre>\n<p>P.S\u00a0: I am assuming our ATM has unlimited money, but in real life, we need to set some boundary on total amount of money the atm\u00a0has.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b6dc12300c4\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>It is a behavioural design pattern. It helps the object in sending the request to next set of objects without having much awareness on who is going to handle it. In other terms, if one object generates an event that has to be handled by another object (which is a part of a chain of objects performing similar tasks), then a worker object would pass the event along the chain that consists of commands and objects, leading to the task being performed finally by another object that can execute\u00a0it.</p>\n<p>One of the real life example is an atm dispenser.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/771/1*j1B0Y0N49uFiaYnrWp5INA.png\"></figure><h3>Implementation Details &amp; Pseudocode</h3>\n<p>First, we\u2019ll implement the pseudocode of the Main Handler class. We are calling it as Dispenser.java. It will be an abstract class, we will have a dispenser object and a method process which is responsible for calling the nextDispenser.</p>\n<pre>package AtmDispenser;<br><br>public abstract class Dispenser {<br><br>  private Dispenser nextdispenser;<br><br>  public Dispenser (Dispenser dispenser) {<br>    this.nextdispenser = dispenser;<br>  }<br>  public void process(int amount) {<br>    this.nextdispenser.process(amount);<br>  }<br>}</pre>\n<p>Next we will create the concrete handlers i.e ThousandDispenser FiveHundredDispenser etc.</p>\n<p>Lets take an example of ThousandDispenser, it will extend Dispenser class, and override the process method with the implementation of accepting the multiplier of 1000 and sending the remaining amount to the next dispenser</p>\n<pre>package AtmDispenser;<br><br>// ThousandDispenser.java<br>public class ThousandDispenser extends Dispenser{<br>  public ThousandDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 1000) return;<br>    int notes = 0;<br>    notes = amount / 1000;<br>    if (notes != 0) {<br>      System.out.println(\"1000's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (1000 * notes);<br>    super.process(remainingAmount);<br>  }<br>}<br><br>// FiveHundredDispenser.java<br>package AtmDispenser;<br><br>public class FiveHundredDispenser extends  Dispenser{<br>  public FiveHundredDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 500) return;<br>    int notes = 0;<br>    notes = amount / 500;<br>    if (notes != 0) {<br>      System.out.println(\"500's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (500 * notes);<br>    super.process(remainingAmount);<br>  }<br>}<br><br>// HundredDispenser.java<br>package AtmDispenser;<br><br>public class HundredDispenser extends  Dispenser{<br>  public HundredDispenser(Dispenser dispenser) {<br>    super(dispenser);<br>  }<br><br>  @Override<br>  public void process(int amount) {<br>    if (amount &lt; 100) return;<br>    int notes = 0;<br>    notes = amount / 100;<br>    if (notes != 0) {<br>      System.out.println(\"100's note is: \"+ notes);<br>    }<br>    int remainingAmount = amount - (100 * notes);<br>    super.process(remainingAmount);<br>  }<br>}</pre>\n<p>Lets create the main.java and execute the dispenser. In this, we are creating dispenser with chaining of dispenser, passing on the nextDispenser i.e For OneThoundDispenser, the nextDispenser will be FiveHundredDispenser; for FiveHundredDispenser, the nextDispenser will be HundredDispenser.</p>\n<pre>package AtmDispenser;<br><br>public class Main {<br>  public static void main(String[] args) {<br>    Dispenser dispenser = new ThousandDispenser(new FiveHundredDispenser(new HundredDispenser(null)));<br>    dispenser.process(2500);<br><br>    // Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61369:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/hsanghamitra/Documents/Personal Learning/Design Pattern/serviceNow/out/production/serviceNow:/Users/hsanghamitra/.m2/repository/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar AtmDispenser.Main<br>    // 1000's note is: 2<br>    // 500's note is: 1<br>  }<br><br>}</pre>\n<p>P.S\u00a0: I am assuming our ATM has unlimited money, but in real life, we need to set some boundary on total amount of money the atm\u00a0has.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5b6dc12300c4\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "chain-of-responsibility",
                "system-design-interview",
                "lld"
            ]
        }
    ]
}